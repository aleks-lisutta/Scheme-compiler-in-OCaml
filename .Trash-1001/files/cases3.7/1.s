;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 48

section .data
const_tbl:
db T_VOID
db T_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING "whatever"
MAKE_LITERAL_SYMBOL(6)
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_RATIONAL(0,1)
MAKE_LITERAL_RATIONAL(1,1)
MAKE_LITERAL_RATIONAL(-1,1)
MAKE_LITERAL_RATIONAL(12345,1)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+32], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+40], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+48], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+56], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+64], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+72], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+80], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+88], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+96], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+104], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+112], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+120], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+128], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+136], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+144], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+152], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+160], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+168], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+176], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+184], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+192], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+200], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+216], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+224], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+208], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+232], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+240], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+248], rax

user_code_fragment:

;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 248
push rax

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 32
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc1
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix1
            malc1:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix1:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code1)

            jmp end_code1


            code1:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

mov rax, qword const_tbl+23
push rax

push 3
             
            mov rax, 1
            cmp rax, 0
            jne malc2
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix2
            malc2:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix2:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code2)

            jmp end_code2


            code2:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

MAKE_BOX 1

MAKE_PARAM_SET_CODE 1

            mov rax, 2
            cmp rax, 0
            jne malc3
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix3
            malc3:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix3:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code3)

            jmp end_code3


            code3:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse4
mov rax, qword const_tbl+1
jmp Lexit4
Lelse4:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 1, 2
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 1, 1
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 3
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit4:


            leave

            ret

            end_code3:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
            cmp rax, 0
            jne malc5
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix5
            malc5:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix5:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code5)

            jmp end_code5


            code5:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse6
mov rax, qword const_tbl+1
jmp Lexit6
Lelse6:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 3
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit6:


            leave

            ret

            end_code5:

push rax
mov rax, PVAR(1)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
	        cmp rax,0
	        jne dep_0_7
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_7
	        dep_0_7:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_7:


            MAKE_CLOSURE(rax,rax,code7)        
            jmp end_code7               ;; lambda

            code7:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt7
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in7:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt7             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp7
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args7:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args7 ;;lambda

only_n_env_ret_rbp7:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt7:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code7:
           ;; lambda
            


            leave

            ret

            end_code2:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code1:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 256
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc8
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix8
            malc8:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix8:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code8)

            jmp end_code8


            code8:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc9
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix9
            malc9:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix9:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code9)

            jmp end_code9


            code9:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse10
mov rax, PVAR(1)
jmp Lexit10
Lelse10:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse11
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 264
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit11
Lelse11:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit11:

Lexit10:


            leave

            ret

            end_code9:


            leave

            ret

            end_code8:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 264
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc12
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix12
            malc12:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix12:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code12)

            jmp end_code12


            code12:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc13
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix13
            malc13:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix13:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code13)

            jmp end_code13


            code13:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse14
mov rax, PVAR(2)
jmp Lexit14
Lelse14:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse15
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 272
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit15
Lelse15:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit15:

Lexit14:


            leave

            ret

            end_code13:


            leave

            ret

            end_code12:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 272
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 32
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc16
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix16
            malc16:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix16:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code16)

            jmp end_code16


            code16:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_17
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_17
	        dep_0_17:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_17:


            MAKE_CLOSURE(rax,rax,code17)        
            jmp end_code17               ;; lambda

            code17:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 2 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt17
                                ;;;; lambda
            

            lea rdx, [(4+2)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in17:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 2             ;;len
            sub rdx, 2


            mov rcx, 2              ;;len

            cmp rdx, 0
            jle noOpt17             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp17
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args17:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args17 ;;lambda

only_n_env_ret_rbp17:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 2+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt17:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse18
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit18
Lelse18:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse19
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 4
             MAKE_GET_FREE_VAR 280
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit19
Lelse19:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit19:

Lexit18:

                ;;body
            leave

            ret

            end_code17:
           ;; lambda
            


            leave

            ret

            end_code16:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 280
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 272
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc20
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix20
            malc20:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix20:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code20)

            jmp end_code20


            code20:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_21
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_21
	        dep_0_21:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_21:


            MAKE_CLOSURE(rax,rax,code21)        
            jmp end_code21               ;; lambda

            code21:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt21
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in21:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt21             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp21
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args21:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args21 ;;lambda

only_n_env_ret_rbp21:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt21:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+1
push rax


            mov rax, 2
            cmp rax, 0
            jne malc22
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix22
            malc22:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix22:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code22)

            jmp end_code22


            code22:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse23
mov rax, PVAR(0)
jmp Lexit23
Lelse23:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 1, 2
push rax

push 4
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit23:


            leave

            ret

            end_code22:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code21:
           ;; lambda
            


            leave

            ret

            end_code20:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 288
	call write_sob_if_not_void


            mov rax, 0
	        cmp rax,0
	        jne dep_0_24
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_24
	        dep_0_24:
	        lea rax, [(0+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 0
	        mov rdx, rax
	        PUSH_ARGS

            test_24:


            MAKE_CLOSURE(rax,rax,code24)        
            jmp end_code24               ;; lambda

            code24:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt24
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in24:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt24             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp24
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args24:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args24 ;;lambda

only_n_env_ret_rbp24:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt24:
              ;;lambda
            mov rax, PVAR(0)
                ;;body
            leave

            ret

            end_code24:
           ;; lambda
            

MAKE_DEFINE 296
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc25
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix25
            malc25:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix25:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code25)

            jmp end_code25


            code25:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc26
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix26
            malc26:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix26:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code26)

            jmp end_code26


            code26:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc27
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix27
            malc27:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix27:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code27)

            jmp end_code27


            code27:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit28

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse29
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit29
Lelse29:
mov rax, qword const_tbl+2
Lexit29:

cmp rax, SOB_FALSE_ADDRESS
jne Lexit28

Lexit28:

            leave

            ret

            end_code27:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code26:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code25:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 304
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 96
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc30
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix30
            malc30:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix30:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code30)

            jmp end_code30


            code30:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_31
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_31
	        dep_0_31:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_31:


            MAKE_CLOSURE(rax,rax,code31)        
            jmp end_code31               ;; lambda

            code31:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt31
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in31:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt31             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp31
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args31:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args31 ;;lambda

only_n_env_ret_rbp31:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt31:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse32
push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+32
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 2
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit32
Lelse32:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 2
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit32:

                ;;body
            leave

            ret

            end_code31:
           ;; lambda
            


            leave

            ret

            end_code30:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 96
	call write_sob_if_not_void


            mov rax, 0
            cmp rax, 0
            jne malc33
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix33
            malc33:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix33:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code33)

            jmp end_code33


            code33:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)
cmp rax, SOB_FALSE_ADDRESS
je Lelse34
mov rax, qword const_tbl+2
jmp Lexit34
Lelse34:
mov rax, qword const_tbl+4
Lexit34:


            leave

            ret

            end_code33:

MAKE_DEFINE 312
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 32
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 176
push rax

MAKE_GET_FREE_VAR 168
push rax

MAKE_GET_FREE_VAR 160
push rax

MAKE_GET_FREE_VAR 152
push rax

MAKE_GET_FREE_VAR 144
push rax

MAKE_GET_FREE_VAR 256
push rax

MAKE_GET_FREE_VAR 264
push rax

MAKE_GET_FREE_VAR 128
push rax

MAKE_GET_FREE_VAR 16
push rax

MAKE_GET_FREE_VAR 8
push rax

push 14
             
            mov rax, 0
            cmp rax, 0
            jne malc35
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix35
            malc35:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix35:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code35)

            jmp end_code35


            code35:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc36
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix36
            malc36:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix36:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code36)

            jmp end_code36


            code36:

            push rbp

            mov rbp,rsp

            
            mov rax, 2
            cmp rax, 0
            jne malc37
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix37
            malc37:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix37:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code37)

            jmp end_code37


            code37:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse41
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit41
Lelse41:
mov rax, qword const_tbl+2
Lexit41:

cmp rax, SOB_FALSE_ADDRESS
je Lelse38
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit38
Lelse38:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse40
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit40
Lelse40:
mov rax, qword const_tbl+2
Lexit40:

cmp rax, SOB_FALSE_ADDRESS
je Lelse39
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit39
Lelse39:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit39:

Lexit38:


            leave

            ret

            end_code37:


            leave

            ret

            end_code36:

push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc42
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix42
            malc42:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix42:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code42)

            jmp end_code42


            code42:

            push rbp

            mov rbp,rsp

            

            mov rax, 2
	        cmp rax,0
	        jne dep_0_43
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_43
	        dep_0_43:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_43:


            MAKE_CLOSURE(rax,rax,code43)        
            jmp end_code43               ;; lambda

            code43:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt43
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in43:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt43             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp43
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args43:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args43 ;;lambda

only_n_env_ret_rbp43:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt43:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+34
push rax

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 5
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 4
             MAKE_VAR_BOUND_CODE 1, 3
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code43:
           ;; lambda
            

MAKE_SET_FREE_VAR 144

            mov rax, 2
	        cmp rax,0
	        jne dep_0_44
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_44
	        dep_0_44:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_44:


            MAKE_CLOSURE(rax,rax,code44)        
            jmp end_code44               ;; lambda

            code44:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt44
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in44:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt44             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp44
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args44:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args44 ;;lambda

only_n_env_ret_rbp44:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt44:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+51
push rax

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 6
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 4
             MAKE_VAR_BOUND_CODE 1, 3
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code44:
           ;; lambda
            

MAKE_SET_FREE_VAR 152
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 7
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc45
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix45
            malc45:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix45:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code45)

            jmp end_code45


            code45:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
	        cmp rax,0
	        jne dep_0_46
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_46
	        dep_0_46:
	        lea rax, [(3+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 3
	        mov rdx, rax
	        PUSH_ARGS

            test_46:


            MAKE_CLOSURE(rax,rax,code46)        
            jmp end_code46               ;; lambda

            code46:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt46
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in46:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt46             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp46
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args46:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args46 ;;lambda

only_n_env_ret_rbp46:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt46:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 2, 12
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse47
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+51
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit47
Lelse47:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 4
             MAKE_VAR_BOUND_CODE 2, 3
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit47:

                ;;body
            leave

            ret

            end_code46:
           ;; lambda
            


            leave

            ret

            end_code45:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_SET_FREE_VAR 160
push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc48
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix48
            malc48:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix48:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code48)

            jmp end_code48


            code48:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 3
            cmp rax, 0
            jne malc49
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix49
            malc49:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix49:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code49)

            jmp end_code49


            code49:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 4
            cmp rax, 0
            jne malc50
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix50
            malc50:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix50:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code50)

            jmp end_code50


            code50:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 3, 12
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit51

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 3, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse52
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 3, 11
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 3, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit52
Lelse52:
mov rax, qword const_tbl+2
Lexit52:

cmp rax, SOB_FALSE_ADDRESS
jne Lexit51

Lexit51:

            leave

            ret

            end_code50:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 4
	        cmp rax,0
	        jne dep_0_53
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_53
	        dep_0_53:
	        lea rax, [(4+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 4
	        mov rdx, rax
	        PUSH_ARGS

            test_53:


            MAKE_CLOSURE(rax,rax,code53)        
            jmp end_code53               ;; lambda

            code53:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt53
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in53:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt53             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp53
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args53:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args53 ;;lambda

only_n_env_ret_rbp53:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt53:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code53:
           ;; lambda
            


            leave

            ret

            end_code49:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code48:

push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc54
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix54
            malc54:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix54:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code54)

            jmp end_code54


            code54:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 8
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_SET_FREE_VAR 168
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 9
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_SET_FREE_VAR 176

            leave

            ret

            end_code54:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code42:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code35:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 32
push rax

MAKE_GET_FREE_VAR 144
push rax

MAKE_GET_FREE_VAR 248
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc55
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix55
            malc55:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix55:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code55)

            jmp end_code55


            code55:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_56
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_56
	        dep_0_56:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_56:


            MAKE_CLOSURE(rax,rax,code56)        
            jmp end_code56               ;; lambda

            code56:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt56
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in56:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt56             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp56
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args56:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args56 ;;lambda

only_n_env_ret_rbp56:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt56:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse57
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+68
push rax

push 3
             MAKE_GET_FREE_VAR 152
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, qword const_tbl+34
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit57
Lelse57:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 0, 1
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, qword const_tbl+68
push rax

push 3
             MAKE_GET_FREE_VAR 152
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit57:

                ;;body
            leave

            ret

            end_code56:
           ;; lambda
            


            leave

            ret

            end_code55:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 320
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 168
push rax

MAKE_GET_FREE_VAR 176
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 312
push rax

MAKE_GET_FREE_VAR 32
push rax

push 7
             
            mov rax, 0
            cmp rax, 0
            jne malc58
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix58
            malc58:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix58:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code58)

            jmp end_code58


            code58:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc59
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix59
            malc59:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix59:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code59)

            jmp end_code59


            code59:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc60
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix60
            malc60:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix60:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code60)

            jmp end_code60


            code60:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit61

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse62
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse63
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit63
Lelse63:
mov rax, qword const_tbl+2
Lexit63:

jmp Lexit62
Lelse62:
mov rax, qword const_tbl+2
Lexit62:

cmp rax, SOB_FALSE_ADDRESS
jne Lexit61

Lexit61:

            leave

            ret

            end_code60:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
	        cmp rax,0
	        jne dep_0_64
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_64
	        dep_0_64:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_64:


            MAKE_CLOSURE(rax,rax,code64)        
            jmp end_code64               ;; lambda

            code64:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 1 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt64
                                ;;;; lambda
            

            lea rdx, [(4+1)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in64:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 1             ;;len
            sub rdx, 2


            mov rcx, 1              ;;len

            cmp rdx, 0
            jle noOpt64             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp64
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args64:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args64 ;;lambda

only_n_env_ret_rbp64:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 1+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt64:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code64:
           ;; lambda
            


            leave

            ret

            end_code59:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code58:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 328
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 32
push rax

MAKE_GET_FREE_VAR 200
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc65
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix65
            malc65:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix65:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code65)

            jmp end_code65


            code65:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc66
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix66
            malc66:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix66:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code66)

            jmp end_code66


            code66:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc67
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix67
            malc67:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix67:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code67)

            jmp end_code67


            code67:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse68
mov rax, PVAR(0)
jmp Lexit68
Lelse68:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit68:


            leave

            ret

            end_code67:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
	        cmp rax,0
	        jne dep_0_69
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_69
	        dep_0_69:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_69:


            MAKE_CLOSURE(rax,rax,code69)        
            jmp end_code69               ;; lambda

            code69:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt69
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in69:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt69             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp69
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args69:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args69 ;;lambda

only_n_env_ret_rbp69:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt69:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse70
mov rax, qword const_tbl+34
jmp Lexit70
Lelse70:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit70:

                ;;body
            leave

            ret

            end_code69:
           ;; lambda
            


            leave

            ret

            end_code66:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code65:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 200
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 168
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc71
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix71
            malc71:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix71:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code71)

            jmp end_code71


            code71:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc72
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix72
            malc72:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix72:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code72)

            jmp end_code72


            code72:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+34
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code72:


            leave

            ret

            end_code71:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 336
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 192
push rax

MAKE_GET_FREE_VAR 168
push rax

MAKE_GET_FREE_VAR 16
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc73
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix73
            malc73:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix73:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code73)

            jmp end_code73


            code73:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc74
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix74
            malc74:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix74:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code74)

            jmp end_code74


            code74:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse75
push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+51
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit75
Lelse75:
mov rax, qword const_tbl+2
Lexit75:


            leave

            ret

            end_code74:


            leave

            ret

            end_code73:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 344
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 16
push rax

MAKE_GET_FREE_VAR 8
push rax

push 3
             
            mov rax, 0
            cmp rax, 0
            jne malc76
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix76
            malc76:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix76:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code76)

            jmp end_code76


            code76:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc77
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix77
            malc77:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix77:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code77)

            jmp end_code77


            code77:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit78

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

cmp rax, SOB_FALSE_ADDRESS
jne Lexit78

Lexit78:

            leave

            ret

            end_code77:


            leave

            ret

            end_code76:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 352
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 144
push rax

MAKE_GET_FREE_VAR 264
push rax

push 3
             
            mov rax, 0
            cmp rax, 0
            jne malc79
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix79
            malc79:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix79:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code79)

            jmp end_code79


            code79:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc80
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix80
            malc80:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix80:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code80)

            jmp end_code80


            code80:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+34
push rax


            mov rax, 2
            cmp rax, 0
            jne malc81
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix81
            malc81:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix81:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code81)

            jmp end_code81


            code81:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+51
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code81:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code80:


            leave

            ret

            end_code79:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 360
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 320
push rax

MAKE_GET_FREE_VAR 176
push rax

MAKE_GET_FREE_VAR 72
push rax

MAKE_GET_FREE_VAR 80
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc82
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix82
            malc82:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix82:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code82)

            jmp end_code82


            code82:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc83
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix83
            malc83:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix83:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code83)

            jmp end_code83


            code83:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc84
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix84
            malc84:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix84:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code84)

            jmp end_code84


            code84:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 3
            cmp rax, 0
            jne malc85
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix85
            malc85:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix85:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code85)

            jmp end_code85


            code85:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+34
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse86
mov rax, PVAR(1)
jmp Lexit86
Lelse86:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+51
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit86:


            leave

            ret

            end_code85:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+1
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+51
push rax

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code84:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code83:


            leave

            ret

            end_code82:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 368
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 112
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 136
push rax

MAKE_GET_FREE_VAR 48
push rax

MAKE_GET_FREE_VAR 40
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 8
push rax

MAKE_GET_FREE_VAR 16
push rax

MAKE_GET_FREE_VAR 368
push rax

MAKE_GET_FREE_VAR 168
push rax

push 12
             
            mov rax, 0
            cmp rax, 0
            jne malc87
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix87
            malc87:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix87:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code87)

            jmp end_code87


            code87:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc88
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix88
            malc88:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix88:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code88)

            jmp end_code88


            code88:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc89
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix89
            malc89:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix89:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code89)

            jmp end_code89


            code89:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse100
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit100
Lelse100:
mov rax, qword const_tbl+2
Lexit100:

cmp rax, SOB_FALSE_ADDRESS
je Lelse90
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit90
Lelse90:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse99
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit99
Lelse99:
mov rax, qword const_tbl+2
Lexit99:

cmp rax, SOB_FALSE_ADDRESS
je Lelse91
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit91
Lelse91:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse98
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit98
Lelse98:
mov rax, qword const_tbl+2
Lexit98:

cmp rax, SOB_FALSE_ADDRESS
je Lelse92
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit92
Lelse92:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse97
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit97
Lelse97:
mov rax, qword const_tbl+2
Lexit97:

cmp rax, SOB_FALSE_ADDRESS
je Lelse93
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse96
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit96
Lelse96:
mov rax, qword const_tbl+2
Lexit96:

jmp Lexit93
Lelse93:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse95
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit95
Lelse95:
mov rax, qword const_tbl+2
Lexit95:

cmp rax, SOB_FALSE_ADDRESS
je Lelse94
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit94
Lelse94:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 7
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit94:

Lexit93:

Lexit92:

Lexit91:

Lexit90:


            leave

            ret

            end_code89:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code88:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code87:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 376
	call write_sob_if_not_void

mov rax, qword const_tbl+85
	call write_sob_if_not_void
  check:
  ;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CAR rax, rsi
      
         pop rbp
         ret

cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CDR rax, rsi
      
         pop rbp
         ret

cons:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
    MAKE_PAIR(rax,rsi,rdi)
    
         pop rbp
         ret

set_car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CAR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

set_cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CDR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

apply:
       push rbp
       mov rbp, rsp 
        
      MAKE_APPLY 1
         pop rbp
         ret