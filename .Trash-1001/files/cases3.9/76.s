;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 45

section .data
const_tbl:
db T_VOID
db T_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING "whatever"
MAKE_LITERAL_SYMBOL(6)
MAKE_LITERAL_RATIONAL(0,1)
MAKE_LITERAL_RATIONAL(1,1)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+32], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+40], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+48], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+56], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+64], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+72], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+80], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+88], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+96], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+104], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+112], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+120], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+128], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+136], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+144], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+152], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+160], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+168], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+176], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+184], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+192], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+200], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+216], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+224], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+208], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+232], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+240], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+248], rax

user_code_fragment:

;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc1
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix1
            malc1:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix1:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code1)

            jmp end_code1


            code1:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc2
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix2
            malc2:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix2:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code2)

            jmp end_code2


            code2:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse3
mov rax, PVAR(1)
jmp Lexit3
Lelse3:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse4
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 256
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit4
Lelse4:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit4:

Lexit3:


            leave

            ret

            end_code2:


            leave

            ret

            end_code1:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 256
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc5
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix5
            malc5:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix5:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code5)

            jmp end_code5


            code5:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc6
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix6
            malc6:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix6:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code6)

            jmp end_code6


            code6:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse7
mov rax, PVAR(2)
jmp Lexit7
Lelse7:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse8
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 264
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit8
Lelse8:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit8:

Lexit7:


            leave

            ret

            end_code6:


            leave

            ret

            end_code5:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 264
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 32
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc9
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix9
            malc9:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix9:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code9)

            jmp end_code9


            code9:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_10
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_10
	        dep_0_10:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_10:


            MAKE_CLOSURE(rax,rax,code10)        
            jmp end_code10               ;; lambda

            code10:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 2 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt10
                                ;;;; lambda
            

            lea rdx, [(4+2)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in10:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 2             ;;len
            sub rdx, 2


            mov rcx, 2              ;;len

            cmp rdx, 0
            jle noOpt10             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp10
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args10:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args10 ;;lambda

only_n_env_ret_rbp10:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 2+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt10:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse11
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit11
Lelse11:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse12
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 4
             MAKE_GET_FREE_VAR 272
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit12
Lelse12:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit12:

Lexit11:

                ;;body
            leave

            ret

            end_code10:
           ;; lambda
            


            leave

            ret

            end_code9:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 272
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 264
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc13
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix13
            malc13:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix13:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code13)

            jmp end_code13


            code13:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_14
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_14
	        dep_0_14:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_14:


            MAKE_CLOSURE(rax,rax,code14)        
            jmp end_code14               ;; lambda

            code14:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt14
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in14:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt14             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp14
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args14:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args14 ;;lambda

only_n_env_ret_rbp14:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt14:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+1
push rax


            mov rax, 2
            cmp rax, 0
            jne malc15
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix15
            malc15:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix15:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code15)

            jmp end_code15


            code15:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse16
mov rax, PVAR(0)
jmp Lexit16
Lelse16:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 1, 2
push rax

push 4
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit16:


            leave

            ret

            end_code15:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code14:
           ;; lambda
            


            leave

            ret

            end_code13:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 280
	call write_sob_if_not_void


            mov rax, 0
	        cmp rax,0
	        jne dep_0_17
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_17
	        dep_0_17:
	        lea rax, [(0+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 0
	        mov rdx, rax
	        PUSH_ARGS

            test_17:


            MAKE_CLOSURE(rax,rax,code17)        
            jmp end_code17               ;; lambda

            code17:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt17
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in17:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt17             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp17
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args17:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args17 ;;lambda

only_n_env_ret_rbp17:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt17:
              ;;lambda
            mov rax, PVAR(0)
                ;;body
            leave

            ret

            end_code17:
           ;; lambda
            

MAKE_DEFINE 288
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc18
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix18
            malc18:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix18:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code18)

            jmp end_code18


            code18:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc19
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix19
            malc19:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix19:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code19)

            jmp end_code19


            code19:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc20
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix20
            malc20:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix20:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code20)

            jmp end_code20


            code20:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit21

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse22
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit22
Lelse22:
mov rax, qword const_tbl+2
Lexit22:

cmp rax, SOB_FALSE_ADDRESS
jne Lexit21

Lexit21:

            leave

            ret

            end_code20:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code19:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code18:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 296
	call write_sob_if_not_void


            mov rax, 0
            cmp rax, 0
            jne malc23
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix23
            malc23:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix23:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code23)

            jmp end_code23


            code23:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)
cmp rax, SOB_FALSE_ADDRESS
je Lelse24
mov rax, qword const_tbl+2
jmp Lexit24
Lelse24:
mov rax, qword const_tbl+4
Lexit24:


            leave

            ret

            end_code23:

MAKE_DEFINE 304
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 32
push rax

MAKE_GET_FREE_VAR 200
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc25
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix25
            malc25:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix25:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code25)

            jmp end_code25


            code25:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc26
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix26
            malc26:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix26:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code26)

            jmp end_code26


            code26:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc27
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix27
            malc27:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix27:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code27)

            jmp end_code27


            code27:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse28
mov rax, PVAR(0)
jmp Lexit28
Lelse28:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit28:


            leave

            ret

            end_code27:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
	        cmp rax,0
	        jne dep_0_29
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_29
	        dep_0_29:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_29:


            MAKE_CLOSURE(rax,rax,code29)        
            jmp end_code29               ;; lambda

            code29:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt29
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in29:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt29             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp29
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args29:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args29 ;;lambda

only_n_env_ret_rbp29:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt29:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse30
mov rax, qword const_tbl+32
jmp Lexit30
Lelse30:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit30:

                ;;body
            leave

            ret

            end_code29:
           ;; lambda
            


            leave

            ret

            end_code26:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code25:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 200
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 168
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc31
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix31
            malc31:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix31:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code31)

            jmp end_code31


            code31:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc32
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix32
            malc32:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix32:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code32)

            jmp end_code32


            code32:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+32
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code32:


            leave

            ret

            end_code31:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 312
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 192
push rax

MAKE_GET_FREE_VAR 168
push rax

MAKE_GET_FREE_VAR 16
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc33
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix33
            malc33:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix33:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code33)

            jmp end_code33


            code33:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc34
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix34
            malc34:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix34:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code34)

            jmp end_code34


            code34:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse35
push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit35
Lelse35:
mov rax, qword const_tbl+2
Lexit35:


            leave

            ret

            end_code34:


            leave

            ret

            end_code33:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 320
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 144
push rax

MAKE_GET_FREE_VAR 256
push rax

push 3
             
            mov rax, 0
            cmp rax, 0
            jne malc36
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix36
            malc36:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix36:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code36)

            jmp end_code36


            code36:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc37
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix37
            malc37:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix37:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code37)

            jmp end_code37


            code37:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+32
push rax


            mov rax, 2
            cmp rax, 0
            jne malc38
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix38
            malc38:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix38:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code38)

            jmp end_code38


            code38:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code38:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code37:


            leave

            ret

            end_code36:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 328
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 344
push rax

MAKE_GET_FREE_VAR 176
push rax

MAKE_GET_FREE_VAR 72
push rax

MAKE_GET_FREE_VAR 80
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc39
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix39
            malc39:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix39:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code39)

            jmp end_code39


            code39:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc40
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix40
            malc40:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix40:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code40)

            jmp end_code40


            code40:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc41
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix41
            malc41:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix41:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code41)

            jmp end_code41


            code41:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 3
            cmp rax, 0
            jne malc42
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix42
            malc42:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix42:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code42)

            jmp end_code42


            code42:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+32
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse43
mov rax, PVAR(1)
jmp Lexit43
Lelse43:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit43:


            leave

            ret

            end_code42:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+1
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code41:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code40:


            leave

            ret

            end_code39:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 336
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 112
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 136
push rax

MAKE_GET_FREE_VAR 48
push rax

MAKE_GET_FREE_VAR 40
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 8
push rax

MAKE_GET_FREE_VAR 16
push rax

MAKE_GET_FREE_VAR 336
push rax

MAKE_GET_FREE_VAR 168
push rax

push 12
             
            mov rax, 0
            cmp rax, 0
            jne malc44
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix44
            malc44:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix44:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code44)

            jmp end_code44


            code44:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc45
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix45
            malc45:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix45:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code45)

            jmp end_code45


            code45:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc46
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix46
            malc46:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix46:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code46)

            jmp end_code46


            code46:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse57
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit57
Lelse57:
mov rax, qword const_tbl+2
Lexit57:

cmp rax, SOB_FALSE_ADDRESS
je Lelse47
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit47
Lelse47:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse56
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit56
Lelse56:
mov rax, qword const_tbl+2
Lexit56:

cmp rax, SOB_FALSE_ADDRESS
je Lelse48
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit48
Lelse48:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse55
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit55
Lelse55:
mov rax, qword const_tbl+2
Lexit55:

cmp rax, SOB_FALSE_ADDRESS
je Lelse49
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit49
Lelse49:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse54
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit54
Lelse54:
mov rax, qword const_tbl+2
Lexit54:

cmp rax, SOB_FALSE_ADDRESS
je Lelse50
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse53
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit53
Lelse53:
mov rax, qword const_tbl+2
Lexit53:

jmp Lexit50
Lelse50:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse52
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit52
Lelse52:
mov rax, qword const_tbl+2
Lexit52:

cmp rax, SOB_FALSE_ADDRESS
je Lelse51
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit51
Lelse51:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 7
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit51:

Lexit50:

Lexit49:

Lexit48:

Lexit47:


            leave

            ret

            end_code46:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code45:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code44:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 352
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc58
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix58
            malc58:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix58:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code58)

            jmp end_code58


            code58:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code58:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax


            mov rax, 0
            cmp rax, 0
            jne malc59
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix59
            malc59:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix59:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code59)

            jmp end_code59


            code59:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code59:

push rax

push 3
             
            mov rax, 0
            cmp rax, 0
            jne malc60
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix60
            malc60:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix60:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code60)

            jmp end_code60


            code60:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code60:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
	call write_sob_if_not_void
  check:
  ;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CAR rax, rsi
      
         pop rbp
         ret

cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CDR rax, rsi
      
         pop rbp
         ret

cons:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
    MAKE_PAIR(rax,rsi,rdi)
    
         pop rbp
         ret

set_car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CAR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

set_cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CDR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

apply:
       push rbp
       mov rbp, rsp 
        
      MAKE_APPLY 1
         pop rbp
         ret