;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 45

section .data
const_tbl:
db T_VOID
db T_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING "whatever"
MAKE_LITERAL_SYMBOL(6)
MAKE_LITERAL_RATIONAL(0,1)
MAKE_LITERAL_RATIONAL(1,1)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+32], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+40], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+48], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+56], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+64], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+72], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+80], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+88], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+96], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+104], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+112], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+120], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+128], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+136], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+144], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+152], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+160], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+168], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+176], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+184], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+192], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+200], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+216], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+224], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+208], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+232], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+240], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+248], rax

user_code_fragment:

;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc1
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix1
            malc1:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix1:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code1)

            jmp end_code1


            code1:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc2
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix2
            malc2:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix2:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code2)

            jmp end_code2


            code2:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse3
mov rax, PVAR(1)
jmp Lexit3
Lelse3:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse4
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 256
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit4
Lelse4:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit4:

Lexit3:


            leave

            ret

            end_code2:


            leave

            ret

            end_code1:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 256
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc5
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix5
            malc5:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix5:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code5)

            jmp end_code5


            code5:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc6
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix6
            malc6:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix6:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code6)

            jmp end_code6


            code6:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse7
mov rax, PVAR(2)
jmp Lexit7
Lelse7:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse8
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 4
             MAKE_GET_FREE_VAR 264
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit8
Lelse8:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit8:

Lexit7:


            leave

            ret

            end_code6:


            leave

            ret

            end_code5:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 264
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 32
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc9
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix9
            malc9:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix9:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code9)

            jmp end_code9


            code9:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_10
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_10
	        dep_0_10:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_10:


            MAKE_CLOSURE(rax,rax,code10)        
            jmp end_code10               ;; lambda

            code10:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 2 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt10
                                ;;;; lambda
            

            lea rdx, [(4+2)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in10:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 2             ;;len
            sub rdx, 2


            mov rcx, 2              ;;len

            cmp rdx, 0
            jle noOpt10             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp10
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args10:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args10 ;;lambda

only_n_env_ret_rbp10:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 2+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt10:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse11
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit11
Lelse11:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse12
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(1)
push rax

push 4
             MAKE_GET_FREE_VAR 272
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit12
Lelse12:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(2)
push rax

mov rax, PVAR(1)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit12:

Lexit11:

                ;;body
            leave

            ret

            end_code10:
           ;; lambda
            


            leave

            ret

            end_code9:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 272
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 264
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc13
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix13
            malc13:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix13:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code13)

            jmp end_code13


            code13:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
	        cmp rax,0
	        jne dep_0_14
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_14
	        dep_0_14:
	        lea rax, [(1+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 1
	        mov rdx, rax
	        PUSH_ARGS

            test_14:


            MAKE_CLOSURE(rax,rax,code14)        
            jmp end_code14               ;; lambda

            code14:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt14
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in14:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt14             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp14
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args14:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args14 ;;lambda

only_n_env_ret_rbp14:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt14:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+1
push rax


            mov rax, 2
            cmp rax, 0
            jne malc15
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix15
            malc15:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix15:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code15)

            jmp end_code15


            code15:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse16
mov rax, PVAR(0)
jmp Lexit16
Lelse16:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, PVAR(1)
push rax

MAKE_VAR_BOUND_CODE 1, 2
push rax

push 4
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit16:


            leave

            ret

            end_code15:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

                ;;body
            leave

            ret

            end_code14:
           ;; lambda
            


            leave

            ret

            end_code13:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 280
	call write_sob_if_not_void


            mov rax, 0
	        cmp rax,0
	        jne dep_0_17
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_17
	        dep_0_17:
	        lea rax, [(0+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 0
	        mov rdx, rax
	        PUSH_ARGS

            test_17:


            MAKE_CLOSURE(rax,rax,code17)        
            jmp end_code17               ;; lambda

            code17:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt17
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in17:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt17             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp17
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args17:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args17 ;;lambda

only_n_env_ret_rbp17:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt17:
              ;;lambda
            mov rax, PVAR(0)
                ;;body
            leave

            ret

            end_code17:
           ;; lambda
            

MAKE_DEFINE 288
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 32
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc18
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix18
            malc18:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix18:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code18)

            jmp end_code18


            code18:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc19
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix19
            malc19:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix19:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code19)

            jmp end_code19


            code19:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc20
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix20
            malc20:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix20:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code20)

            jmp end_code20


            code20:

            push rbp

            mov rbp,rsp

            
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
jne Lexit21

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse22
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit22
Lelse22:
mov rax, qword const_tbl+2
Lexit22:

cmp rax, SOB_FALSE_ADDRESS
jne Lexit21

Lexit21:

            leave

            ret

            end_code20:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code19:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code18:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 296
	call write_sob_if_not_void


            mov rax, 0
            cmp rax, 0
            jne malc23
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix23
            malc23:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix23:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code23)

            jmp end_code23


            code23:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)
cmp rax, SOB_FALSE_ADDRESS
je Lelse24
mov rax, qword const_tbl+2
jmp Lexit24
Lelse24:
mov rax, qword const_tbl+4
Lexit24:


            leave

            ret

            end_code23:

MAKE_DEFINE 304
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 32
push rax

MAKE_GET_FREE_VAR 200
push rax

push 5
             
            mov rax, 0
            cmp rax, 0
            jne malc25
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix25
            malc25:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix25:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code25)

            jmp end_code25


            code25:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc26
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix26
            malc26:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix26:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code26)

            jmp end_code26


            code26:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc27
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix27
            malc27:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix27:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code27)

            jmp end_code27


            code27:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse28
mov rax, PVAR(0)
jmp Lexit28
Lelse28:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit28:


            leave

            ret

            end_code27:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS


            mov rax, 2
	        cmp rax,0
	        jne dep_0_29
	        MALLOC rax,8
	        mov qword [rax], SOB_NIL_ADDRESS
	        jmp test_29
	        dep_0_29:
	        lea rax, [(2+1)*WORD_SIZE]
	        MALLOC rax, rax
	        mov rcx, qword [rbp+2*8]
	        COPY_ENV rcx, rax, 2
	        mov rdx, rax
	        PUSH_ARGS

            test_29:


            MAKE_CLOSURE(rax,rax,code29)        
            jmp end_code29               ;; lambda

            code29:                        ;; lambda 
            push rbp
            mov rbp,rsp


            mov rcx,[rbp+WORD_SIZE*3] ;;rcx=n 
            sub rcx, 0 ;;rcx=n-(length of args)      
            dec rcx
            cmp rcx,0

            je noOpt29
                                ;;;; lambda
            

            lea rdx, [(4+0)*WORD_SIZE+rbp]  ;;len
            MAKE_LIST rax, rcx, rdx


loop_in29:                              ;;lambda

            lea rbx, [rbp+3*WORD_SIZE]

            mov rcx,qword [rbp+3*8] ;; rcx=n
            dec rcx
            lea rcx, [rbx+WORD_SIZE*rcx]
            mov qword [rcx], rax


            mov rdx,qword [rbp+3*8]
            sub rdx, 0             ;;len
            sub rdx, 2


            mov rcx, 0              ;;len

            cmp rdx, 0
            jle noOpt29             ;;lambda

            cmp rcx,0
            je only_n_env_ret_rbp29
            lea rbx, [rbp+4*WORD_SIZE]

    loop_args29:             ;;lambda
            dec rcx
            lea r10, [rbx+WORD_SIZE*rcx]

            lea r11, [r10+WORD_SIZE*rdx]
            mov r10, qword [r10]
            mov qword [r11],r10   
            cmp rcx,0
            jne loop_args29 ;;lambda

only_n_env_ret_rbp29:
            lea rax, [rbp+WORD_SIZE*(3+rdx)]
            mov r12, 0+2
            mov qword [rax],r12              ;;len
            
            sub rax,8
            mov rbx, qword [rbp+2*8]
            mov qword [rax] ,rbx
            
            sub rax,8
            mov rbx,qword [rbp+1*8]
            mov qword [rax] ,rbx

            sub rax,8
            mov rbx,qword [rbp]
            mov qword [rax] ,rbx

            mov rbp,    rax
            mov rsp,    rbp

            noOpt29:
              ;;lambda
            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse30
mov rax, qword const_tbl+32
jmp Lexit30
Lelse30:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit30:

                ;;body
            leave

            ret

            end_code29:
           ;; lambda
            


            leave

            ret

            end_code26:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code25:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 200
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 168
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc31
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix31
            malc31:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix31:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code31)

            jmp end_code31


            code31:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc32
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix32
            malc32:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix32:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code32)

            jmp end_code32


            code32:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+32
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code32:


            leave

            ret

            end_code31:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 312
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 192
push rax

MAKE_GET_FREE_VAR 168
push rax

MAKE_GET_FREE_VAR 16
push rax

push 4
             
            mov rax, 0
            cmp rax, 0
            jne malc33
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix33
            malc33:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix33:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code33)

            jmp end_code33


            code33:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc34
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix34
            malc34:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix34:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code34)

            jmp end_code34


            code34:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse35
push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit35
Lelse35:
mov rax, qword const_tbl+2
Lexit35:


            leave

            ret

            end_code34:


            leave

            ret

            end_code33:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 320
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 144
push rax

MAKE_GET_FREE_VAR 256
push rax

push 3
             
            mov rax, 0
            cmp rax, 0
            jne malc36
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix36
            malc36:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix36:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code36)

            jmp end_code36


            code36:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc37
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix37
            malc37:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix37:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code37)

            jmp end_code37


            code37:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

mov rax, qword const_tbl+32
push rax


            mov rax, 2
            cmp rax, 0
            jne malc38
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix38
            malc38:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix38:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code38)

            jmp end_code38


            code38:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 1
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code38:

push rax

push 4
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 8
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code37:


            leave

            ret

            end_code36:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 328
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 208
push rax

MAKE_GET_FREE_VAR 344
push rax

MAKE_GET_FREE_VAR 176
push rax

MAKE_GET_FREE_VAR 72
push rax

MAKE_GET_FREE_VAR 80
push rax

push 6
             
            mov rax, 0
            cmp rax, 0
            jne malc39
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix39
            malc39:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix39:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code39)

            jmp end_code39


            code39:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc40
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix40
            malc40:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix40:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code40)

            jmp end_code40


            code40:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc41
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix41
            malc41:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix41:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code41)

            jmp end_code41


            code41:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 3
            cmp rax, 0
            jne malc42
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix42
            malc42:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix42:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code42)

            jmp end_code42


            code42:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+32
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse43
mov rax, PVAR(1)
jmp Lexit43
Lelse43:
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 2, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit43:


            leave

            ret

            end_code42:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+1
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+49
push rax

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             mov rax, PVAR(0)
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code41:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code40:


            leave

            ret

            end_code39:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 336
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

MAKE_GET_FREE_VAR 112
push rax

MAKE_GET_FREE_VAR 224
push rax

MAKE_GET_FREE_VAR 216
push rax

MAKE_GET_FREE_VAR 136
push rax

MAKE_GET_FREE_VAR 48
push rax

MAKE_GET_FREE_VAR 40
push rax

MAKE_GET_FREE_VAR 24
push rax

MAKE_GET_FREE_VAR 8
push rax

MAKE_GET_FREE_VAR 16
push rax

MAKE_GET_FREE_VAR 336
push rax

MAKE_GET_FREE_VAR 168
push rax

push 12
             
            mov rax, 0
            cmp rax, 0
            jne malc44
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix44
            malc44:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix44:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code44)

            jmp end_code44


            code44:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+23
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc45
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix45
            malc45:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix45:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code45)

            jmp end_code45


            code45:

            push rbp

            mov rbp,rsp

            

MAKE_BOX 0

MAKE_PARAM_SET_CODE 0

            mov rax, 2
            cmp rax, 0
            jne malc46
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix46
            malc46:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix46:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code46)

            jmp end_code46


            code46:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse57
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 2
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit57
Lelse57:
mov rax, qword const_tbl+2
Lexit57:

cmp rax, SOB_FALSE_ADDRESS
je Lelse47
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit47
Lelse47:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse56
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 3
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit56
Lelse56:
mov rax, qword const_tbl+2
Lexit56:

cmp rax, SOB_FALSE_ADDRESS
je Lelse48
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit48
Lelse48:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse55
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 5
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit55
Lelse55:
mov rax, qword const_tbl+2
Lexit55:

cmp rax, SOB_FALSE_ADDRESS
je Lelse49
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 10
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit49
Lelse49:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse54
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 4
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit54
Lelse54:
mov rax, qword const_tbl+2
Lexit54:

cmp rax, SOB_FALSE_ADDRESS
je Lelse50
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 8
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse53
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 9
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit53
Lelse53:
mov rax, qword const_tbl+2
Lexit53:

jmp Lexit50
Lelse50:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
cmp rax, SOB_FALSE_ADDRESS
je Lelse52
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 6
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
jmp Lexit52
Lelse52:
mov rax, qword const_tbl+2
Lexit52:

cmp rax, SOB_FALSE_ADDRESS
je Lelse51
push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 1
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 3
             MAKE_VAR_BOUND_CODE 0, 0
mov rax, qword [rax]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

jmp Lexit51
Lelse51:
push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(1)
push rax

mov rax, PVAR(0)
push rax

push 3
             MAKE_VAR_BOUND_CODE 1, 7
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 7
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax

Lexit51:

Lexit50:

Lexit49:

Lexit48:

Lexit47:


            leave

            ret

            end_code46:

push rax
mov rax, PVAR(0)
pop qword [rax]
mov rax, SOB_VOID_ADDRESS

mov rax, PVAR(0)
mov rax, qword [rax]

            leave

            ret

            end_code45:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code44:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
MAKE_DEFINE 352
	call write_sob_if_not_void

push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+2
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+4
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc58
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix58
            malc58:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix58:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code58)

            jmp end_code58


            code58:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc59
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix59
            malc59:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix59:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code59)

            jmp end_code59


            code59:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code59:


            leave

            ret

            end_code58:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc60
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix60
            malc60:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix60:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code60)

            jmp end_code60


            code60:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc61
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix61
            malc61:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix61:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code61)

            jmp end_code61


            code61:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code61:


            leave

            ret

            end_code60:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc62
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix62
            malc62:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix62:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code62)

            jmp end_code62


            code62:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc63
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix63
            malc63:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix63:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code63)

            jmp end_code63


            code63:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code63:


            leave

            ret

            end_code62:

push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc64
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix64
            malc64:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix64:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code64)

            jmp end_code64


            code64:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc65
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix65
            malc65:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix65:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code65)

            jmp end_code65


            code65:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code65:


            leave

            ret

            end_code64:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc66
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix66
            malc66:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix66:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code66)

            jmp end_code66


            code66:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc67
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix67
            malc67:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix67:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code67)

            jmp end_code67


            code67:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc68
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix68
            malc68:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix68:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code68)

            jmp end_code68


            code68:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc69
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix69
            malc69:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix69:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code69)

            jmp end_code69


            code69:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code69:


            leave

            ret

            end_code68:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc70
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix70
            malc70:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix70:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code70)

            jmp end_code70


            code70:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc71
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix71
            malc71:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix71:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code71)

            jmp end_code71


            code71:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc72
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix72
            malc72:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix72:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code72)

            jmp end_code72


            code72:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc73
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix73
            malc73:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix73:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code73)

            jmp end_code73


            code73:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc74
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix74
            malc74:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix74:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code74)

            jmp end_code74


            code74:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code74:


            leave

            ret

            end_code73:


            leave

            ret

            end_code72:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code71:


            leave

            ret

            end_code70:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code67:


            leave

            ret

            end_code66:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc75
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix75
            malc75:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix75:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code75)

            jmp end_code75


            code75:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc76
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix76
            malc76:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix76:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code76)

            jmp end_code76


            code76:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc77
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix77
            malc77:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix77:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code77)

            jmp end_code77


            code77:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc78
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix78
            malc78:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix78:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code78)

            jmp end_code78


            code78:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code78:


            leave

            ret

            end_code77:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc79
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix79
            malc79:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix79:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code79)

            jmp end_code79


            code79:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc80
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix80
            malc80:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix80:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code80)

            jmp end_code80


            code80:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc81
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix81
            malc81:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix81:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code81)

            jmp end_code81


            code81:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc82
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix82
            malc82:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix82:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code82)

            jmp end_code82


            code82:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc83
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix83
            malc83:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix83:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code83)

            jmp end_code83


            code83:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code83:


            leave

            ret

            end_code82:


            leave

            ret

            end_code81:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code80:


            leave

            ret

            end_code79:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code76:


            leave

            ret

            end_code75:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc84
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix84
            malc84:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix84:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code84)

            jmp end_code84


            code84:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc85
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix85
            malc85:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix85:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code85)

            jmp end_code85


            code85:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code85:


            leave

            ret

            end_code84:

push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc86
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix86
            malc86:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix86:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code86)

            jmp end_code86


            code86:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc87
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix87
            malc87:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix87:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code87)

            jmp end_code87


            code87:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code87:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc88
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix88
            malc88:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix88:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code88)

            jmp end_code88


            code88:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code88:

push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc89
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix89
            malc89:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix89:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code89)

            jmp end_code89


            code89:

            push rbp

            mov rbp,rsp

            
            mov rax, 2
            cmp rax, 0
            jne malc90
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix90
            malc90:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix90:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code90)

            jmp end_code90


            code90:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc91
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix91
            malc91:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix91:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code91)

            jmp end_code91


            code91:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code91:


            leave

            ret

            end_code90:


            leave

            ret

            end_code89:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc92
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix92
            malc92:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix92:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code92)

            jmp end_code92


            code92:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc93
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix93
            malc93:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix93:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code93)

            jmp end_code93


            code93:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc94
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix94
            malc94:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix94:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code94)

            jmp end_code94


            code94:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc95
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix95
            malc95:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix95:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code95)

            jmp end_code95


            code95:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code95:


            leave

            ret

            end_code94:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code93:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc96
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix96
            malc96:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix96:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code96)

            jmp end_code96


            code96:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc97
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix97
            malc97:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix97:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code97)

            jmp end_code97


            code97:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc98
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix98
            malc98:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix98:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code98)

            jmp end_code98


            code98:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code98:


            leave

            ret

            end_code97:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code96:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc99
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix99
            malc99:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix99:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code99)

            jmp end_code99


            code99:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc100
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix100
            malc100:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix100:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code100)

            jmp end_code100


            code100:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc101
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix101
            malc101:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix101:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code101)

            jmp end_code101


            code101:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc102
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix102
            malc102:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix102:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code102)

            jmp end_code102


            code102:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code102:


            leave

            ret

            end_code101:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc103
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix103
            malc103:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix103:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code103)

            jmp end_code103


            code103:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc104
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix104
            malc104:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix104:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code104)

            jmp end_code104


            code104:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc105
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix105
            malc105:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix105:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code105)

            jmp end_code105


            code105:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc106
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix106
            malc106:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix106:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code106)

            jmp end_code106


            code106:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc107
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix107
            malc107:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix107:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code107)

            jmp end_code107


            code107:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code107:


            leave

            ret

            end_code106:


            leave

            ret

            end_code105:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code104:


            leave

            ret

            end_code103:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code100:


            leave

            ret

            end_code99:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc108
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix108
            malc108:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix108:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code108)

            jmp end_code108


            code108:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc109
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix109
            malc109:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix109:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code109)

            jmp end_code109


            code109:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc110
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix110
            malc110:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix110:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code110)

            jmp end_code110


            code110:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code110:


            leave

            ret

            end_code109:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code108:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc111
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix111
            malc111:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix111:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code111)

            jmp end_code111


            code111:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc112
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix112
            malc112:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix112:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code112)

            jmp end_code112


            code112:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc113
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix113
            malc113:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix113:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code113)

            jmp end_code113


            code113:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code113:


            leave

            ret

            end_code112:


            leave

            ret

            end_code111:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc114
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix114
            malc114:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix114:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code114)

            jmp end_code114


            code114:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc115
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix115
            malc115:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix115:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code115)

            jmp end_code115


            code115:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc116
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix116
            malc116:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix116:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code116)

            jmp end_code116


            code116:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code116:


            leave

            ret

            end_code115:


            leave

            ret

            end_code114:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code92:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc117
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix117
            malc117:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix117:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code117)

            jmp end_code117


            code117:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc118
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix118
            malc118:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix118:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code118)

            jmp end_code118


            code118:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc119
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix119
            malc119:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix119:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code119)

            jmp end_code119


            code119:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code119:


            leave

            ret

            end_code118:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code117:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code86:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc120
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix120
            malc120:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix120:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code120)

            jmp end_code120


            code120:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc121
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix121
            malc121:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix121:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code121)

            jmp end_code121


            code121:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc122
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix122
            malc122:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix122:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code122)

            jmp end_code122


            code122:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc123
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix123
            malc123:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix123:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code123)

            jmp end_code123


            code123:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc124
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix124
            malc124:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix124:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code124)

            jmp end_code124


            code124:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc125
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix125
            malc125:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix125:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code125)

            jmp end_code125


            code125:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc126
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix126
            malc126:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix126:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code126)

            jmp end_code126


            code126:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code126:


            leave

            ret

            end_code125:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc127
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix127
            malc127:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix127:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code127)

            jmp end_code127


            code127:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc128
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix128
            malc128:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix128:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code128)

            jmp end_code128


            code128:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code128:


            leave

            ret

            end_code127:

push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc129
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix129
            malc129:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix129:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code129)

            jmp end_code129


            code129:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc130
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix130
            malc130:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix130:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code130)

            jmp end_code130


            code130:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc131
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix131
            malc131:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix131:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code131)

            jmp end_code131


            code131:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code131:


            leave

            ret

            end_code130:


            leave

            ret

            end_code129:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc132
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix132
            malc132:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix132:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code132)

            jmp end_code132


            code132:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc133
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix133
            malc133:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix133:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code133)

            jmp end_code133


            code133:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc134
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix134
            malc134:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix134:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code134)

            jmp end_code134


            code134:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc135
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix135
            malc135:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix135:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code135)

            jmp end_code135


            code135:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code135:


            leave

            ret

            end_code134:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code133:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc136
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix136
            malc136:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix136:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code136)

            jmp end_code136


            code136:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc137
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix137
            malc137:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix137:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code137)

            jmp end_code137


            code137:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc138
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix138
            malc138:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix138:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code138)

            jmp end_code138


            code138:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code138:


            leave

            ret

            end_code137:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code136:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc139
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix139
            malc139:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix139:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code139)

            jmp end_code139


            code139:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc140
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix140
            malc140:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix140:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code140)

            jmp end_code140


            code140:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc141
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix141
            malc141:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix141:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code141)

            jmp end_code141


            code141:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code141:


            leave

            ret

            end_code140:


            leave

            ret

            end_code139:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc142
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix142
            malc142:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix142:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code142)

            jmp end_code142


            code142:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc143
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix143
            malc143:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix143:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code143)

            jmp end_code143


            code143:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc144
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix144
            malc144:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix144:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code144)

            jmp end_code144


            code144:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code144:


            leave

            ret

            end_code143:


            leave

            ret

            end_code142:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code132:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc145
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix145
            malc145:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix145:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code145)

            jmp end_code145


            code145:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc146
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix146
            malc146:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix146:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code146)

            jmp end_code146


            code146:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc147
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix147
            malc147:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix147:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code147)

            jmp end_code147


            code147:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code147:


            leave

            ret

            end_code146:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code145:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code124:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code123:


            leave

            ret

            end_code122:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc148
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix148
            malc148:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix148:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code148)

            jmp end_code148


            code148:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc149
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix149
            malc149:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix149:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code149)

            jmp end_code149


            code149:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc150
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix150
            malc150:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix150:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code150)

            jmp end_code150


            code150:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code150:


            leave

            ret

            end_code149:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc151
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix151
            malc151:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix151:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code151)

            jmp end_code151


            code151:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc152
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix152
            malc152:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix152:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code152)

            jmp end_code152


            code152:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc153
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix153
            malc153:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix153:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code153)

            jmp end_code153


            code153:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code153:


            leave

            ret

            end_code152:


            leave

            ret

            end_code151:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code148:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc154
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix154
            malc154:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix154:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code154)

            jmp end_code154


            code154:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc155
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix155
            malc155:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix155:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code155)

            jmp end_code155


            code155:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc156
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix156
            malc156:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix156:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code156)

            jmp end_code156


            code156:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc157
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix157
            malc157:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix157:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code157)

            jmp end_code157


            code157:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc158
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix158
            malc158:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix158:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code158)

            jmp end_code158


            code158:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code158:


            leave

            ret

            end_code157:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc159
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix159
            malc159:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix159:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code159)

            jmp end_code159


            code159:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc160
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix160
            malc160:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix160:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code160)

            jmp end_code160


            code160:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code160:


            leave

            ret

            end_code159:

push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc161
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix161
            malc161:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix161:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code161)

            jmp end_code161


            code161:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc162
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix162
            malc162:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix162:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code162)

            jmp end_code162


            code162:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc163
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix163
            malc163:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix163:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code163)

            jmp end_code163


            code163:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code163:


            leave

            ret

            end_code162:


            leave

            ret

            end_code161:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc164
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix164
            malc164:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix164:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code164)

            jmp end_code164


            code164:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc165
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix165
            malc165:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix165:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code165)

            jmp end_code165


            code165:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc166
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix166
            malc166:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix166:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code166)

            jmp end_code166


            code166:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc167
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix167
            malc167:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix167:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code167)

            jmp end_code167


            code167:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code167:


            leave

            ret

            end_code166:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code165:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc168
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix168
            malc168:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix168:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code168)

            jmp end_code168


            code168:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc169
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix169
            malc169:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix169:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code169)

            jmp end_code169


            code169:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc170
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix170
            malc170:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix170:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code170)

            jmp end_code170


            code170:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code170:


            leave

            ret

            end_code169:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code168:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc171
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix171
            malc171:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix171:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code171)

            jmp end_code171


            code171:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc172
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix172
            malc172:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix172:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code172)

            jmp end_code172


            code172:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc173
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix173
            malc173:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix173:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code173)

            jmp end_code173


            code173:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code173:


            leave

            ret

            end_code172:


            leave

            ret

            end_code171:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc174
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix174
            malc174:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix174:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code174)

            jmp end_code174


            code174:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc175
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix175
            malc175:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix175:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code175)

            jmp end_code175


            code175:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc176
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix176
            malc176:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix176:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code176)

            jmp end_code176


            code176:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code176:


            leave

            ret

            end_code175:


            leave

            ret

            end_code174:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code164:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc177
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix177
            malc177:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix177:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code177)

            jmp end_code177


            code177:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc178
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix178
            malc178:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix178:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code178)

            jmp end_code178


            code178:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc179
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix179
            malc179:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix179:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code179)

            jmp end_code179


            code179:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code179:


            leave

            ret

            end_code178:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code177:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code156:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code155:


            leave

            ret

            end_code154:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc180
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix180
            malc180:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix180:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code180)

            jmp end_code180


            code180:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc181
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix181
            malc181:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix181:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code181)

            jmp end_code181


            code181:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc182
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix182
            malc182:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix182:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code182)

            jmp end_code182


            code182:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code182:


            leave

            ret

            end_code181:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc183
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix183
            malc183:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix183:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code183)

            jmp end_code183


            code183:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc184
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix184
            malc184:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix184:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code184)

            jmp end_code184


            code184:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc185
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix185
            malc185:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix185:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code185)

            jmp end_code185


            code185:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code185:


            leave

            ret

            end_code184:


            leave

            ret

            end_code183:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code180:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc186
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix186
            malc186:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix186:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code186)

            jmp end_code186


            code186:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc187
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix187
            malc187:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix187:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code187)

            jmp end_code187


            code187:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc188
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix188
            malc188:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix188:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code188)

            jmp end_code188


            code188:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc189
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix189
            malc189:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix189:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code189)

            jmp end_code189


            code189:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code189:


            leave

            ret

            end_code188:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code187:


            leave

            ret

            end_code186:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code121:


            leave

            ret

            end_code120:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
	call write_sob_if_not_void
  check:
  ;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CAR rax, rsi
      
         pop rbp
         ret

cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CDR rax, rsi
      
         pop rbp
         ret

cons:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
    MAKE_PAIR(rax,rsi,rdi)
    
         pop rbp
         ret

set_car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CAR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

set_cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CDR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

apply:
       push rbp
       mov rbp, rsp 
        
      MAKE_APPLY 1
         pop rbp
         ret