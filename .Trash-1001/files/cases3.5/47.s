;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 32

section .data
const_tbl:
db T_VOID
db T_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+32], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+40], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+48], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+56], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+64], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+72], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+80], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+88], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+96], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+104], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+112], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+120], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+128], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+136], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+144], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+152], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+160], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+168], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+176], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+184], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+192], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+200], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+216], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+224], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+208], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+232], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+240], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+248], rax

user_code_fragment:

;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+2
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, qword const_tbl+4
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc1
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix1
            malc1:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix1:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code1)

            jmp end_code1


            code1:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc2
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix2
            malc2:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix2:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code2)

            jmp end_code2


            code2:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code2:


            leave

            ret

            end_code1:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc3
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix3
            malc3:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix3:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code3)

            jmp end_code3


            code3:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc4
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix4
            malc4:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix4:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code4)

            jmp end_code4


            code4:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code4:


            leave

            ret

            end_code3:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc5
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix5
            malc5:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix5:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code5)

            jmp end_code5


            code5:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc6
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix6
            malc6:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix6:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code6)

            jmp end_code6


            code6:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code6:


            leave

            ret

            end_code5:

push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc7
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix7
            malc7:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix7:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code7)

            jmp end_code7


            code7:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc8
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix8
            malc8:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix8:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code8)

            jmp end_code8


            code8:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code8:


            leave

            ret

            end_code7:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc9
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix9
            malc9:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix9:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code9)

            jmp end_code9


            code9:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc10
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix10
            malc10:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix10:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code10)

            jmp end_code10


            code10:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc11
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix11
            malc11:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix11:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code11)

            jmp end_code11


            code11:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc12
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix12
            malc12:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix12:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code12)

            jmp end_code12


            code12:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code12:


            leave

            ret

            end_code11:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc13
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix13
            malc13:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix13:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code13)

            jmp end_code13


            code13:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc14
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix14
            malc14:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix14:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code14)

            jmp end_code14


            code14:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc15
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix15
            malc15:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix15:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code15)

            jmp end_code15


            code15:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc16
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix16
            malc16:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix16:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code16)

            jmp end_code16


            code16:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc17
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix17
            malc17:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix17:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code17)

            jmp end_code17


            code17:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code17:


            leave

            ret

            end_code16:


            leave

            ret

            end_code15:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code14:


            leave

            ret

            end_code13:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code10:


            leave

            ret

            end_code9:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc18
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix18
            malc18:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix18:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code18)

            jmp end_code18


            code18:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc19
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix19
            malc19:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix19:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code19)

            jmp end_code19


            code19:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc20
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix20
            malc20:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix20:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code20)

            jmp end_code20


            code20:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc21
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix21
            malc21:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix21:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code21)

            jmp end_code21


            code21:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code21:


            leave

            ret

            end_code20:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc22
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix22
            malc22:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix22:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code22)

            jmp end_code22


            code22:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc23
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix23
            malc23:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix23:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code23)

            jmp end_code23


            code23:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc24
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix24
            malc24:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix24:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code24)

            jmp end_code24


            code24:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc25
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix25
            malc25:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix25:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code25)

            jmp end_code25


            code25:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc26
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix26
            malc26:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix26:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code26)

            jmp end_code26


            code26:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code26:


            leave

            ret

            end_code25:


            leave

            ret

            end_code24:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code23:


            leave

            ret

            end_code22:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code19:


            leave

            ret

            end_code18:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 0
            cmp rax, 0
            jne malc27
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix27
            malc27:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix27:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code27)

            jmp end_code27


            code27:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc28
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix28
            malc28:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix28:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code28)

            jmp end_code28


            code28:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code28:


            leave

            ret

            end_code27:

push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc29
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix29
            malc29:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix29:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code29)

            jmp end_code29


            code29:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc30
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix30
            malc30:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix30:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code30)

            jmp end_code30


            code30:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code30:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc31
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix31
            malc31:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix31:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code31)

            jmp end_code31


            code31:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code31:

push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc32
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix32
            malc32:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix32:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code32)

            jmp end_code32


            code32:

            push rbp

            mov rbp,rsp

            
            mov rax, 2
            cmp rax, 0
            jne malc33
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix33
            malc33:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix33:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code33)

            jmp end_code33


            code33:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc34
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix34
            malc34:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix34:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code34)

            jmp end_code34


            code34:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code34:


            leave

            ret

            end_code33:


            leave

            ret

            end_code32:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 1
            cmp rax, 0
            jne malc35
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix35
            malc35:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix35:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code35)

            jmp end_code35


            code35:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc36
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix36
            malc36:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix36:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code36)

            jmp end_code36


            code36:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc37
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix37
            malc37:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix37:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code37)

            jmp end_code37


            code37:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc38
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix38
            malc38:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix38:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code38)

            jmp end_code38


            code38:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code38:


            leave

            ret

            end_code37:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code36:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc39
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix39
            malc39:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix39:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code39)

            jmp end_code39


            code39:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc40
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix40
            malc40:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix40:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code40)

            jmp end_code40


            code40:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc41
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix41
            malc41:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix41:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code41)

            jmp end_code41


            code41:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code41:


            leave

            ret

            end_code40:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code39:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc42
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix42
            malc42:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix42:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code42)

            jmp end_code42


            code42:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc43
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix43
            malc43:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix43:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code43)

            jmp end_code43


            code43:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc44
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix44
            malc44:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix44:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code44)

            jmp end_code44


            code44:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc45
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix45
            malc45:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix45:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code45)

            jmp end_code45


            code45:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code45:


            leave

            ret

            end_code44:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc46
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix46
            malc46:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix46:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code46)

            jmp end_code46


            code46:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc47
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix47
            malc47:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix47:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code47)

            jmp end_code47


            code47:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc48
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix48
            malc48:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix48:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code48)

            jmp end_code48


            code48:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc49
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix49
            malc49:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix49:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code49)

            jmp end_code49


            code49:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc50
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix50
            malc50:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix50:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code50)

            jmp end_code50


            code50:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code50:


            leave

            ret

            end_code49:


            leave

            ret

            end_code48:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code47:


            leave

            ret

            end_code46:

push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code43:


            leave

            ret

            end_code42:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc51
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix51
            malc51:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix51:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code51)

            jmp end_code51


            code51:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc52
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix52
            malc52:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix52:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code52)

            jmp end_code52


            code52:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc53
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix53
            malc53:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix53:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code53)

            jmp end_code53


            code53:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code53:


            leave

            ret

            end_code52:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code51:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc54
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix54
            malc54:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix54:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code54)

            jmp end_code54


            code54:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc55
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix55
            malc55:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix55:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code55)

            jmp end_code55


            code55:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc56
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix56
            malc56:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix56:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code56)

            jmp end_code56


            code56:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code56:


            leave

            ret

            end_code55:


            leave

            ret

            end_code54:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc57
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix57
            malc57:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix57:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code57)

            jmp end_code57


            code57:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc58
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix58
            malc58:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix58:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code58)

            jmp end_code58


            code58:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc59
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix59
            malc59:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix59:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code59)

            jmp end_code59


            code59:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code59:


            leave

            ret

            end_code58:


            leave

            ret

            end_code57:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code35:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 1
            cmp rax, 0
            jne malc60
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix60
            malc60:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix60:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code60)

            jmp end_code60


            code60:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 2
            cmp rax, 0
            jne malc61
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix61
            malc61:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix61:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code61)

            jmp end_code61


            code61:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc62
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix62
            malc62:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix62:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code62)

            jmp end_code62


            code62:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code62:


            leave

            ret

            end_code61:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code60:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code29:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 0
            cmp rax, 0
            jne malc63
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix63
            malc63:
            mov rcx, 8
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 0
            mov rdx, rax
            PUSH_ARGS 

            fix63:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code63)

            jmp end_code63


            code63:

            push rbp

            mov rbp,rsp

            
            mov rax, 1
            cmp rax, 0
            jne malc64
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix64
            malc64:
            mov rcx, 16
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 1
            mov rdx, rax
            PUSH_ARGS 

            fix64:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code64)

            jmp end_code64


            code64:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc65
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix65
            malc65:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix65:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code65)

            jmp end_code65


            code65:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc66
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix66
            malc66:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix66:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code66)

            jmp end_code66


            code66:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc67
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix67
            malc67:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix67:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code67)

            jmp end_code67


            code67:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc68
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix68
            malc68:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix68:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code68)

            jmp end_code68


            code68:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc69
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix69
            malc69:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix69:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code69)

            jmp end_code69


            code69:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code69:


            leave

            ret

            end_code68:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc70
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix70
            malc70:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix70:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code70)

            jmp end_code70


            code70:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc71
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix71
            malc71:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix71:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code71)

            jmp end_code71


            code71:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code71:


            leave

            ret

            end_code70:

push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc72
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix72
            malc72:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix72:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code72)

            jmp end_code72


            code72:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc73
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix73
            malc73:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix73:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code73)

            jmp end_code73


            code73:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc74
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix74
            malc74:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix74:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code74)

            jmp end_code74


            code74:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code74:


            leave

            ret

            end_code73:


            leave

            ret

            end_code72:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc75
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix75
            malc75:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix75:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code75)

            jmp end_code75


            code75:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc76
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix76
            malc76:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix76:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code76)

            jmp end_code76


            code76:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc77
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix77
            malc77:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix77:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code77)

            jmp end_code77


            code77:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc78
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix78
            malc78:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix78:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code78)

            jmp end_code78


            code78:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code78:


            leave

            ret

            end_code77:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code76:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc79
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix79
            malc79:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix79:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code79)

            jmp end_code79


            code79:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc80
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix80
            malc80:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix80:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code80)

            jmp end_code80


            code80:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc81
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix81
            malc81:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix81:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code81)

            jmp end_code81


            code81:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code81:


            leave

            ret

            end_code80:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code79:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc82
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix82
            malc82:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix82:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code82)

            jmp end_code82


            code82:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc83
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix83
            malc83:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix83:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code83)

            jmp end_code83


            code83:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc84
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix84
            malc84:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix84:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code84)

            jmp end_code84


            code84:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code84:


            leave

            ret

            end_code83:


            leave

            ret

            end_code82:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc85
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix85
            malc85:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix85:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code85)

            jmp end_code85


            code85:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc86
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix86
            malc86:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix86:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code86)

            jmp end_code86


            code86:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc87
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix87
            malc87:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix87:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code87)

            jmp end_code87


            code87:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code87:


            leave

            ret

            end_code86:


            leave

            ret

            end_code85:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code75:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc88
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix88
            malc88:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix88:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code88)

            jmp end_code88


            code88:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc89
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix89
            malc89:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix89:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code89)

            jmp end_code89


            code89:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc90
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix90
            malc90:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix90:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code90)

            jmp end_code90


            code90:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code90:


            leave

            ret

            end_code89:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code88:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code67:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code66:


            leave

            ret

            end_code65:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc91
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix91
            malc91:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix91:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code91)

            jmp end_code91


            code91:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc92
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix92
            malc92:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix92:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code92)

            jmp end_code92


            code92:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc93
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix93
            malc93:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix93:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code93)

            jmp end_code93


            code93:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code93:


            leave

            ret

            end_code92:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc94
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix94
            malc94:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix94:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code94)

            jmp end_code94


            code94:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc95
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix95
            malc95:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix95:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code95)

            jmp end_code95


            code95:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc96
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix96
            malc96:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix96:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code96)

            jmp end_code96


            code96:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code96:


            leave

            ret

            end_code95:


            leave

            ret

            end_code94:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code91:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc97
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix97
            malc97:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix97:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code97)

            jmp end_code97


            code97:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc98
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix98
            malc98:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix98:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code98)

            jmp end_code98


            code98:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc99
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix99
            malc99:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix99:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code99)

            jmp end_code99


            code99:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc100
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix100
            malc100:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix100:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code100)

            jmp end_code100


            code100:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc101
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix101
            malc101:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix101:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code101)

            jmp end_code101


            code101:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code101:


            leave

            ret

            end_code100:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc102
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix102
            malc102:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix102:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code102)

            jmp end_code102


            code102:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc103
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix103
            malc103:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix103:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code103)

            jmp end_code103


            code103:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code103:


            leave

            ret

            end_code102:

push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc104
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix104
            malc104:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix104:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code104)

            jmp end_code104


            code104:

            push rbp

            mov rbp,rsp

            
            mov rax, 6
            cmp rax, 0
            jne malc105
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix105
            malc105:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix105:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code105)

            jmp end_code105


            code105:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc106
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix106
            malc106:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix106:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code106)

            jmp end_code106


            code106:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code106:


            leave

            ret

            end_code105:


            leave

            ret

            end_code104:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 5
            cmp rax, 0
            jne malc107
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix107
            malc107:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix107:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code107)

            jmp end_code107


            code107:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc108
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix108
            malc108:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix108:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code108)

            jmp end_code108


            code108:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc109
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix109
            malc109:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix109:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code109)

            jmp end_code109


            code109:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc110
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix110
            malc110:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix110:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code110)

            jmp end_code110


            code110:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code110:


            leave

            ret

            end_code109:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code108:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc111
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix111
            malc111:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix111:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code111)

            jmp end_code111


            code111:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 7
            cmp rax, 0
            jne malc112
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix112
            malc112:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix112:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code112)

            jmp end_code112


            code112:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc113
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix113
            malc113:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix113:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code113)

            jmp end_code113


            code113:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code113:


            leave

            ret

            end_code112:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code111:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc114
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix114
            malc114:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix114:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code114)

            jmp end_code114


            code114:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc115
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix115
            malc115:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix115:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code115)

            jmp end_code115


            code115:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc116
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix116
            malc116:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix116:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code116)

            jmp end_code116


            code116:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             MAKE_VAR_BOUND_CODE 1, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code116:


            leave

            ret

            end_code115:


            leave

            ret

            end_code114:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 6
            cmp rax, 0
            jne malc117
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix117
            malc117:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix117:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code117)

            jmp end_code117


            code117:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc118
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix118
            malc118:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix118:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code118)

            jmp end_code118


            code118:

            push rbp

            mov rbp,rsp

            
            mov rax, 8
            cmp rax, 0
            jne malc119
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix119
            malc119:
            mov rcx, 72
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 8
            mov rdx, rax
            PUSH_ARGS 

            fix119:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code119)

            jmp end_code119


            code119:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 0, 0
push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

MAKE_VAR_BOUND_CODE 1, 0
push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code119:


            leave

            ret

            end_code118:


            leave

            ret

            end_code117:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code107:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 5
            cmp rax, 0
            jne malc120
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix120
            malc120:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix120:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code120)

            jmp end_code120


            code120:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 6
            cmp rax, 0
            jne malc121
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix121
            malc121:
            mov rcx, 56
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 6
            mov rdx, rax
            PUSH_ARGS 

            fix121:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code121)

            jmp end_code121


            code121:

            push rbp

            mov rbp,rsp

            
            mov rax, 7
            cmp rax, 0
            jne malc122
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix122
            malc122:
            mov rcx, 64
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 7
            mov rdx, rax
            PUSH_ARGS 

            fix122:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code122)

            jmp end_code122


            code122:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code122:


            leave

            ret

            end_code121:

push rax

push 2
             mov rax, PVAR(0)
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code120:

             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code99:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code98:


            leave

            ret

            end_code97:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc123
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix123
            malc123:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix123:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code123)

            jmp end_code123


            code123:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc124
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix124
            malc124:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix124:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code124)

            jmp end_code124


            code124:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc125
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix125
            malc125:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix125:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code125)

            jmp end_code125


            code125:

            push rbp

            mov rbp,rsp

            MAKE_VAR_BOUND_CODE 0, 0

            leave

            ret

            end_code125:


            leave

            ret

            end_code124:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 3
            cmp rax, 0
            jne malc126
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix126
            malc126:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix126:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code126)

            jmp end_code126


            code126:

            push rbp

            mov rbp,rsp

            
            mov rax, 4
            cmp rax, 0
            jne malc127
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix127
            malc127:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix127:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code127)

            jmp end_code127


            code127:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc128
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix128
            malc128:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix128:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code128)

            jmp end_code128


            code128:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code128:


            leave

            ret

            end_code127:


            leave

            ret

            end_code126:

push rax

push 2
             mov rax, PVAR(0)
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code123:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
push rax

push 2
             
            mov rax, 2
            cmp rax, 0
            jne malc129
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix129
            malc129:
            mov rcx, 24
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 2
            mov rdx, rax
            PUSH_ARGS 

            fix129:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code129)

            jmp end_code129


            code129:

            push rbp

            mov rbp,rsp

            
            mov rax, 3
            cmp rax, 0
            jne malc130
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix130
            malc130:
            mov rcx, 32
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 3
            mov rdx, rax
            PUSH_ARGS 

            fix130:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code130)

            jmp end_code130


            code130:

            push rbp

            mov rbp,rsp

            push SOB_NIL_ADDRESS
  ;;magic


            mov rax, 4
            cmp rax, 0
            jne malc131
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix131
            malc131:
            mov rcx, 40
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 4
            mov rdx, rax
            PUSH_ARGS 

            fix131:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code131)

            jmp end_code131


            code131:

            push rbp

            mov rbp,rsp

            
            mov rax, 5
            cmp rax, 0
            jne malc132
            MALLOC rax, 8
            mov qword [rax], SOB_NIL_ADDRESS
            jmp fix132
            malc132:
            mov rcx, 48
            MALLOC rax, rcx
            mov rcx, qword [rbp+2*8]
            COPY_ENV rcx, rax, 5
            mov rdx, rax
            PUSH_ARGS 

            fix132:
            

            mov rbx,rax
            MAKE_CLOSURE(rax,rbx,code132)

            jmp end_code132


            code132:

            push rbp

            mov rbp,rsp

            mov rax, PVAR(0)

            leave

            ret

            end_code132:


            leave

            ret

            end_code131:

push rax

push 2
             push SOB_NIL_ADDRESS
  ;;magic

mov rax, PVAR(0)
push rax

push 2
             MAKE_VAR_BOUND_CODE 0, 0
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code130:


            leave

            ret

            end_code129:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             mov r9, PARAM_COUNT
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             push qword [rbp+WORD_SIZE*1]
             push qword [rbp]
             YAKI_SHIFT_FRAME 6
             pop rbp
             lea rsp ,[rsp + 8*(r9+4)]
             jmp rax


            leave

            ret

            end_code64:


            leave

            ret

            end_code63:

             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
             CLOSURE_ENV rbx, rax
             push rbx
             CLOSURE_CODE rax, rax
             call rax
add rsp , 8*1 

            pop rbx

            lea rsp , [rsp + 8* rbx]
	call write_sob_if_not_void
  check:
  ;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CAR rax, rsi
      
         pop rbp
         ret

cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	
      CDR rax, rsi
      
         pop rbp
         ret

cons:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
    MAKE_PAIR(rax,rsi,rdi)
    
         pop rbp
         ret

set_car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CAR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

set_cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        CDR rsi, rsi
        mov [rsi], rdi
        mov rax, SOB_VOID_ADDRESS
        
         pop rbp
         ret

apply:
       push rbp
       mov rbp, rsp 
        
      MAKE_APPLY 1
         pop rbp
         ret